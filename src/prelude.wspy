;; Standard library for wispy

;; Atoms
(def {nil} {})
(def {true} (eq 1 1))
(def {false} (eq 1 0))

;; Function definition
(def {fun} (\ {f b} {
             def (head f) (\ (tail f) b)
             }))

;; Open a new scope
(fun {let b} {
     ((\ {_} b) ())
     })

;; Unpack a list
(fun {unpack fn l} {
     eval (join (list fn) l)
     })

;; Pack a list for a functiona
(fun {pack fn & xs} {fn xs} )

;; Curry and uncurried calles
(def {curry} unpack)
(def {uncurr} pack)

;; Perform several things in sequence
(fun {do & l} {
     if (eq l nil)
     {nil}
     {last l}

     })

;; Logical functions
(fun {not x} {
     if x
     {false}
     {true}
     })

(fun {or x y} {
     (if x
         {true}
       {if y
       {true}
       {false}}
       )
     })

(fun {and x y} {
     (if (or (not x) (not y)) ;; If x or y are false
         {false}
       {true}
     
       )})

;; Misc functions
(fun {flip fn a b} {fn b a})

;; Compose functions
(fun {comp f g x} {f (g x)})


;; List functions
(fun {len l}{
     if (eq l nil)
     {0}
     { + 1 (len (tail l))}
     })

(fun {nth n l} {
     if (eq n 0)
     {eval (head l)}
     { nth (- n 1) (tail l) }
     })

(fun {fst l} {nth 0 l})
(fun {snd l} {nth 1 l})

(fun {last l} {nth (- (len l) 1) l})

(fun {take n l} {
     if (eq n 0)
     {nil}
     {join (head l) (take ( - n 1) (tail l))}
     })

(fun {drop n l} {
     if (eq n 0)
     {l}
     {drop (- n 1) (tail l)}
     })

(fun {split n l} {list (take n l) (drop n l)})

(fun {elem x l} {
     if (eq l nil)
        {false}
        {if (eq x (fst l))
        {true}
        {elem x (tail l)}
        }
        
     })


(fun {map f l}
     {if (eq l nil)
     {nil}
     {join (list (f (fst l))) (map f (tail l))}
     })

(fun {filter f l} {
     if (eq nil l)
     {nil}
     {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
     })

(fun {foldl f z l} {
     if (eq l nil)
     {z}
     {foldl f (f z (fst l)) (tail l)}
     })

(fun {sum l} { foldl + 0 l})

(fun {product l} {foldl * 1 l})

;;Conditionals
(fun {select & cs} {
     (if (eq cs nil)
     {error "Could not find case"}
     {
     if (fst (fst cs))
     {snd (fst cs)}
     { unpack select (tail cs)}
     })
     })

(def {otherwise} true)

(fun {case x & cs} {
     if (eq cs nil) 
     nil
     {
     if (eq x (fst (fst cs)))
     {snd (fst cs)}
     {unpack case (join (list x) (tail cs))}
     }
})

(fun {day x} {
     (case x
     { 0 "Monday"}
     { 1 "Tuesday"}
     { 2 "Wednesday"}
     { 3 "Thursday"}
     { 4 "Friday"}
     { 5 "Saturday"}
     { 6 "Sunday"}
)
})

(fun {month-day-suffix i} {
     select
     {(eq i 0) "st"}
     {(eq i 1) "nd"}
     {(eq i 2) "rd"}
     {otherwise "th"}
     })

(fun {fib x} {
     select
     { (or (eq x 0) (eq x 1)) (x)}
     {otherwise (+ (fib (- x 2)) (fib (- x 1)))}

})
     



